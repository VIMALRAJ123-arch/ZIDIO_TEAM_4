"use client"

import type React from "react"

import { useState } from "react"
import Link from "next/link"
import Image from "next/image"
import { useRouter } from "next/navigation"
import { Eye, EyeOff } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { ComicSpeechBubble } from "@/components/comic-speech-bubble"
import { AvatarSelector } from "@/components/avatar-selector"

export default function SignupPage() {
  const router = useRouter()
  const [showPassword, setShowPassword] = useState(false)
  const [selectedAvatar, setSelectedAvatar] = useState("/avtaar1.jpg")
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [confirmPassword, setConfirmPassword] = useState("")
  const [firstName, setFirstName] = useState("")
  const [lastName, setLastName] = useState("")
  const [formStatus, setFormStatus] = useState<{
    message: string
    type: "success" | "error" | "none"
  }>({ message: "", type: "none" })

  const handleSignup = (e: React.FormEvent) => {
    e.preventDefault()

    // Basic validation
    if (!email || !password || !confirmPassword || !firstName || !lastName) {
      setFormStatus({
        message: "Please fill in all required fields",
        type: "error",
      })
      return
    }

    if (password !== confirmPassword) {
      setFormStatus({
        message: "Passwords do not match",
        type: "error",
      })
      return
    }

    // Email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      setFormStatus({
        message: "Please enter a valid email address",
        type: "error",
      })
      return
    }

    // Simulate successful signup
    setFormStatus({
      message: "Account created successfully! Redirecting...",
      type: "success",
    })

    // Store user data in localStorage (for demo purposes)
    const userData = {
      email,
      firstName,
      lastName,
      avatar: selectedAvatar,
      // Don't store actual password in localStorage in a real app
      // This is just for demo purposes
      isLoggedIn: true,
    }

    localStorage.setItem("superhero_user", JSON.stringify(userData))
    // In a real app, you would validate and create account here
    //router.push("/")
    // Redirect after a short delay
    setTimeout(() => {
      router.push("/")
    }, 1500)
  }

  const avatarOptions = [
    {id: 1, src: "/avtaar1.jpg", alt: "Hero Avtaar1"},
    {id: 2, src: "/avtaar2.jpg", alt: "Hero Avtaar2"},
    {id: 3, src: "/avtaar3.jpg", alt: "Hero Avtaar3"},
    {id: 4, src: "/avtaar4.jpg", alt: "Hero Avtaar4"},
    {id: 5, src: "/avtaar5.jpg", alt: "Hero Avtaar5"},
    {id: 6, src: "/avtaar6.jpg", alt: "Hero Avtaar6"},
    {id: 7, src: "/avtaar7.jpg", alt: "Hero Avtaar7"},
    {id: 8, src: "/avtaar8.jpg", alt: "Hero Avtaar8"},
  ]

  return (
    <div className="flex min-h-screen items-center justify-center p-4">
      <div className="w-full max-w-md">
        <div className="mb-8 flex justify-center">
          <ComicSpeechBubble className="transform -rotate-2">
            <p className="text-xl font-bold">Join the League of Heroes!</p>
          </ComicSpeechBubble>
        </div>

        <div className="mb-6">
          <h3 className="text-lg font-semibold mb-2">Choose Your Avatar</h3>
          <AvatarSelector options={avatarOptions} />
        </div>

        <Card className="border-primary/20 backdrop-blur-sm bg-background/80">
          <CardHeader className="space-y-1 text-center">
            <div className="flex justify-center mb-4">
              <Link href="/">
                <Image
                  src="/placeholder.svg?height=64&width=64"
                  alt="Logo"
                  width={64}
                  height={64}
                  className="rounded-full"
                />
              </Link>
            </div>
            <CardTitle className="text-2xl font-bold">Create Your Account</CardTitle>
            <CardDescription>Join SuperTees and unleash your inner hero</CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSignup} className="space-y-4 mt-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="first-name">First name</Label>
                  <Input id="first-name" placeholder="John" required />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="last-name">Last name</Label>
                  <Input id="last-name" placeholder="Doe" required />
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor="signup-email">Email</Label>
                <Input id="signup-email" type="email" placeholder="hero@example.com" required />
              </div>
              <div className="space-y-2">
                <Label htmlFor="signup-password">Password</Label>
                <div className="relative">
                  <Input
                    id="signup-password"
                    type={showPassword ? "text" : "password"}
                    placeholder="••••••••"
                    required
                  />
                  <Button
                    type="button"
                    variant="ghost"
                    size="icon"
                    className="absolute right-0 top-0 h-full px-3"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                    <span className="sr-only">{showPassword ? "Hide password" : "Show password"}</span>
                  </Button>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor="confirm-password">Confirm Password</Label>
                <Input id="confirm-password" type="password" placeholder="••••••••" required />
              </div>

              <div className="space-y-2">
                <Label>Choose Your Hero Avatar</Label>
                <AvatarSelector options={avatarOptions} />
              </div>

              <Button type="submit" className="w-full bg-yellow-400 text-blue-950 hover:bg-yellow-300">
                Create Account
              </Button>

              <div className="text-center text-sm">
                Already have an account?{" "}
                <Link href="/login" className="text-primary hover:underline">
                  Login here
                </Link>
              </div>
            </form>
          </CardContent>
          <CardFooter className="flex flex-col space-y-4">
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <span className="w-full border-t" />
              </div>
              <div className="relative flex justify-center text-xs uppercase">
                <span className="bg-background px-2 text-muted-foreground">Or continue with</span>
              </div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <Button variant="outline">
                <svg className="mr-2 h-4 w-4" viewBox="0 0 24 24">
                  <path
                    d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                    fill="#4285F4"
                  />
                  <path
                    d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                    fill="#34A853"
                  />
                  <path
                    d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                    fill="#FBBC05"
                  />
                  <path
                    d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                    fill="#EA4335"
                  />
                  <path d="M1 1h22v22H1z" fill="none" />
                </svg>
                Google
              </Button>
              <Button variant="outline">
                <svg className="mr-2 h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
                </svg>
                GitHub
              </Button>
            </div>
          </CardFooter>
        </Card>
      </div>
    </div>
  )
}
